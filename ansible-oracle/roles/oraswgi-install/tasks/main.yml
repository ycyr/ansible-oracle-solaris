---

  - name: install-home-gi | Check if GI is already installed
    #shell: grep "{{ oracle_home_gi }}" "{{ oracle_inventory_loc }}/ContentsXML/inventory.xml" |wc -l
    shell: cat "{{ oracle_inventory_loc }}/ContentsXML/inventory.xml" |grep -w {{ oracle_home_gi  }} |awk  '{print $3}' | cut -f2 -d'"'
    tags:
    - checkifgiinstall
    changed_when: False
    register: checkgiinstall

  - name: install-home-gi | check if GI has been configured
    stat: path=/etc/oracle/olr.loc
    register: olrloc

  - name: install-home-gi | set fact for patch_before_rootsh
    set_fact:
        patch_before_rootsh: False
    when: olrloc.stat.exists and patch_before_rootsh

  - name: install-home-gi | Mount nfs share with installation media
    mount: src="{{ nfs_server_sw }}:{{ nfs_server_sw_path }}" name={{ oracle_stage_remote }} fstype=nfs state=mounted
    tags:
      - nfsmountgi
    when: install_from_nfs

  - name: install-home-gi | Add new dotprofile (GI)
    template: src=dotprofile-gi.j2 dest={{ grid_user_home }}/{{ oracle_profile_name_gi }} owner={{ grid_install_user }} group={{ oracle_group }} mode=755 backup=yes
    tags:
    - dotprofilegi

  - name: install-home-gi | Create common directories
    file: dest={{ item.name }} mode={{ item.mode}} owner={{ item.owner }} group={{ item.group }} state=directory
    with_items: "{{oracle_directories}}"
    tags:
      - directories

  - name: install-home-gi | Create stage directory (version specific)
    file: dest={{ oracle_stage }}/{{ item.version }} mode=775 owner="{{ oracle_user }}" group={{ oracle_group }} state=directory
    become: yes
    with_items: "{{oracle_sw_image_gi}}"
    when:  oracle_install_version_gi  ==  item.version
    tags:
      - directories

  - name: install-home-gi | Create ORACLE_HOME directory (GI)
    file: dest={{ oracle_home_gi }} owner="{{ grid_install_user }}" group={{ oracle_group }} state=directory mode=775
    become: yes
    tags:
      - directories
    when: oracle_home_gi not in checkgiinstall.stdout

  - include_tasks: "{{ www_download_bin }}.yml"
    when: not is_sw_source_local and oracle_sw_copy

  - name: install-home-gi | Copy oracle installfiles to server (GI) (local)
    copy: src={{ oracle_sw_source_local }}/{{ item.filename }} dest={{ oracle_stage }} mode=775 force=no
    with_items: "{{oracle_sw_image_gi}}"
    become: yes
    become_user: "{{ grid_install_user }}"
    tags:
      - oragridsw
    when: oracle_home_gi not in checkgiinstall.stdout and is_sw_source_local and oracle_install_version_gi == item.version and oracle_sw_copy

  - name: include_tasks "{{ oracle_install_version_gi }}.yml"
    include_tasks: "{{ oracle_install_version_gi }}.yml"

  - name: install-home-gi | Check if stuff is running
    shell: "{{ oracle_home_gi }}/bin/crsctl stat res -t"
    tags:
     - crsctl
    register: crsctl
    run_once: "{{ configure_cluster}}"
    when: oracle_home_gi not in checkgiinstall.stdout

  - debug: var=crsctl.stdout_lines
    tags:
     - crsctl
    run_once: "{{ configure_cluster}}"
    when: oracle_home_gi not in checkgiinstall.stdout

  - name: install-home-gi | Update Nodelist, set CRS=TRUE
    shell: "{{ oracle_home_gi }}/oui/bin/runInstaller -updateNodeList ORACLE_HOME={{ oracle_home_gi }} CRS=TRUE"
    become: yes
    become_user: "{{ grid_install_user }}"
    run_once: "{{ configure_cluster}}"
    when: oracle_home_gi not in checkgiinstall.stdout
    ignore_errors: true
    tags:
      - updatenodelist

  - name: install-home-gi | Add additional info to glogin.sql (1)
    lineinfile: dest="{{ oracle_home_gi }}/sqlplus/admin/glogin.sql" line='set sqlprompt "_user @ _connect_identifier:>"' backup=yes
    tags:
      - glogingi
    when: oracle_home_gi not in checkgiinstall.stdout

  - name: install-home-gi | Add additional info to glogin.sql (2)
    lineinfile: dest="{{ oracle_home_gi }}/sqlplus/admin/glogin.sql" line='set time on' backup=yes
    tags:
      - glogingi
    when: oracle_home_gi not in checkgiinstall.stdout

  - name: include_role oraswgi-manage-patches
    include_role:
          name: oraswgi-manage-patches
    when: not patch_before_rootsh and apply_patches_gi

  - name: install-home-gi | Check opatch lsinventory (GI)
    shell: "{{ oracle_home_gi }}/OPatch/opatch lspatches"
    become: yes
    become_user: "{{ grid_install_user }}"
    environment: "{{oracle_env}}"
    register: opatchls
    tags:
     - opatchls
    when: oracle_home_gi not in checkgiinstall.stdout

  - name: install-home-gi | Check opatch lsinventory (GI)
    debug: var=opatchls.stdout_lines
    tags:
     - opatchls
    when: oracle_home_gi not in checkgiinstall.stdout

  - name: install-home-gi | Check olsnodes (GI)
    shell: "{{ oracle_home_gi }}/bin/olsnodes -a -n -s -t"
    become: yes
    become_user: "{{ grid_install_user }}"
    when: oracle_gi_cluster_type |upper == 'FLEX' and '12' in oracle_install_version_gi
    register: olsnodes
    tags:
     - olsnodes

  - name: install-home-gi | Check olsnodes (GI)
    debug: var=olsnodes.stdout_lines
    when: oracle_gi_cluster_type|upper == 'FLEX' and '12' in oracle_install_version_gi
    tags:
     - olsnodes

  - name: install-home-gi | Unmount nfs share with installation media
    mount: src="{{ nfs_server_sw }}:{{ nfs_server_sw_path }}" name={{ oracle_stage_remote }} fstype=nfs state=absent
    when: install_from_nfs
    tags: nfsunmountgi
