- name: install-home-db | set fact with ORACLE_HOME
  set_fact:
       oracle_home_db: "{%- if db_homes_config[dbh.home]['oracle_home'] is defined  -%}
                            {{db_homes_config[dbh.home]['oracle_home']}}
                        {%- else -%}
                             {{oracle_base}}/{{db_homes_config[dbh.home]['version']}}/{{db_homes_config[dbh.home]['home']}}
                        {%- endif -%}"

- name: install-home-db | Check if DB-server is already installed
  shell: cat "{{ oracle_inventory_loc }}/ContentsXML/inventory.xml" |grep -w {{ oracle_home_db  }} |awk  '{print $3}' | cut -f2 -d'"'
  run_once: "{{ configure_cluster }}"
  register: existing_dbhome
  changed_when: False
  failed_when: False
  tags: install_home,existing_dbhome,checkdbswinstall

- debug: msg="Installing ORACLE_HOME - {{ oracle_home_db }}"
  when: oracle_home_db not in existing_dbhome.stdout_lines

- name: install-home-db | add dotprofile
  template:
    src: dotprofile-home.j2
    dest: "/home/{{ oracle_user}}/{{ oracle_profile_name}}"
    owner: "{{ oracle_user }}"
    group: "{{ oracle_group }}"
    mode: 0660
  #when: oracle_home_db not in existing_dbhome.stdout_lines
  tags: create_db,dotprofile_db

- name: install-home-db | Setup response file for install (DB)
  template:
    src: "db-install.rsp.{{ db_version}}.j2"
    dest: "{{ oracle_rsp_stage }}/{{ oracle_db_responsefile }}"
    owner: "{{ oracle_user }}"
    group: "{{ oracle_group }}"
    mode: 0600
  run_once: "{{ configure_cluster }}"
  when: oracle_home_db not in existing_dbhome.stdout_lines
  register:
  tags: responsefileswdb

# unarchive Oracle RDBMS 12c+
- block:
  - name: install-home-db | Extract files
    unarchive:
        src={{ oracle_stage }}/{{ oracle_sw_source_local }}/{{ db_homes_config[dbh.home].imagename | default(item[0].filename) }}
        dest={{ oracle_home_db }}
        copy=no
        creates="{{ oracle_home_db }}/{{ item[0].creates}}"
    with_nested:
      - "{{oracle_sw_image_db}}"
      - "" # dummy to force item.0 instead of item.
    become: yes
    become_user: "{{ oracle_user }}"
    run_once: "{{ configure_cluster}}"
    when: 
      - item[0].version == db_homes_config[dbh.home]['version'] 
      - dbh.state|lower == 'present' 
      - oracle_sw_copy 
      - oracle_home_db not in existing_dbhome.stdout_lines
    tags:
      - oradbswunpack

  - name: install-home-db | Extract files (from remote location)
    unarchive:
        src={{ oracle_stage_remote }}/{{ db_homes_config[dbh.home].imagename | default(item[0].filename) }}
        dest={{ oracle_home_db }}
        copy=no
        creates="{{ oracle_home_db }}/{{ item[0].creates}}"
    with_nested:
      - "{{oracle_sw_image_db}}"
      - "" # dummy to force item.0 instead of item.
    become: yes
    become_user: "{{ oracle_user }}"
    run_once: "{{ configure_cluster}}"
    when:
      - item[0].version == db_homes_config[dbh.home]['version']
      - dbh.state|lower == 'present'
      - not oracle_sw_copy
      - oracle_home_db not in existing_dbhome.stdout_lines
    tags:
      - oradbswunpack
  when:
    - db_homes_config[dbh.home]['version'] is version('12.2', '>=')

- include_tasks: "{{ db_version }}.yml"

# oracle_EE_options = '' => Nothing to do
# licence options in 11.2+ must be changed by chopt
# => use this method for all >= 11.2 (Doc ID 948061.1)
# touch a statefile instead checking the logfile from chopt
# we cannot use default/main.yml here. => complicated structure for 'enabled' 'disabled'...
# check for running processes on $ORACLE_HOME/bin/oracle
# 1st check for installed lsof, because systems could miss it...
- name: install-home-db | Change Database options with chopt
  shell: |
    set -eu
    if lsof > /dev/null  2>&1 ; then
      if lsof {{ oracle_home_db }}/bin/oracle > /dev/null 2>&1 ; then
        echo "running Oracle processes found. Aborting chopt!"
        exit 10
      fi
    else
      echo "Please install lsof"
      exit 9
    fi
    {{ oracle_home_db }}/bin/chopt {{ item.state | replace(true, 'enable') | replace(false, 'disable') }} {{item.option}} \
    && touch {{ oracle_home_db }}/install/chopt_{{item.option}}_{{ item.state }}.state
  args: 
    creates: "{{ oracle_home_db }}/install/chopt_{{item.option}}_{{ item.state }}.state{{ choptcheck }}"
  with_items:
    - "{{oracle_EE_options}}"
  become: yes
  become_user: "{{ oracle_user }}"
  register: choptout
  changed_when: '"Writing" in choptout.stdout'
  when: db_homes_config[dbh.home]['edition'] == 'EE' and oracle_EE_options is defined and disable_EE_options
  loop_control:
    label: "{{ oracle_home_db }} {{ item.state | replace(true, 'enable') | replace(false, 'disable') }} {{item.option}}"
  tags:
    - dbchopt

- name: install-home-db | Run root script after installation
  shell: "{{ oracle_home_db }}/root.sh"
  run_once: "{{ configure_cluster}}"
  when: oradbinstall.changed
  tags:
    - runroot

- name: install-home-db | Generate glogin.sql
  template: src=glogin.sql.j2 dest="{{ oracle_home_db }}/sqlplus/admin/glogin.sql" backup=yes
  become: yes
  become_user: "{{ oracle_user }}"
  tags:
    - glogindb

- name: install-home-db | Check opatch lspatches (DB)
  shell: "{{ oracle_home_db }}/OPatch/opatch lspatches"
  become: yes
  become_user: "{{ oracle_user }}"
  run_once: "{{ configure_cluster}}"
  when: oradbinstall is defined
  changed_when: False
  register: opatchls
  tags:
   - opatchls

- debug: var=opatchls.stdout_lines
  run_once: "{{ configure_cluster}}"
  when: opatchls is defined
  tags:
   - opatchls
  ignore_errors: true
